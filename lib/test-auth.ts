import { auth } from './firebase';
import { signInWithEmailAndPassword } from 'firebase/auth';

export async function testAuthMethods() {
  console.log('üß™ Test des m√©thodes d\'authentification...');
  
  try {
    // Test 1: V√©rifier que Firebase est initialis√©
    console.log('1Ô∏è‚É£ V√©rification de l\'initialisation Firebase...');
    if (auth) {
      console.log('‚úÖ Firebase Auth initialis√© correctement');
    } else {
      console.log('‚ùå Firebase Auth non initialis√©');
      return { success: false, error: 'Firebase Auth non initialis√©' };
    }
    
    // Test 2: Authentification email/mot de passe (test avec un compte inexistant)
    console.log('2Ô∏è‚É£ Test authentification email/mot de passe...');
    try {
      const emailResult = await signInWithEmailAndPassword(auth, 'test@example.com', 'password123');
      console.log('‚úÖ Authentification email r√©ussie:', emailResult.user.email);
      await auth.signOut();
    } catch (emailError: any) {
      if (emailError.code === 'auth/user-not-found' || emailError.code === 'auth/invalid-credential') {
        console.log('‚ÑπÔ∏è Authentification email √©chou√©e (normal - compte inexistant):', emailError.code);
        console.log('‚úÖ Le syst√®me d\'authentification fonctionne correctement');
      } else {
        console.log('‚ùå Erreur d\'authentification inattendue:', emailError.code);
        return { success: false, error: emailError.message };
      }
    }
    
    console.log('‚úÖ Tests termin√©s avec succ√®s');
    return { success: true };
    
  } catch (error: any) {
    console.error('‚ùå Test √©chou√©:', error);
    console.error('Code d\'erreur:', error.code);
    console.error('Message:', error.message);
    return { success: false, error: error.message };
  }
}

// Fonction pour v√©rifier la configuration
export function checkAuthConfiguration() {
  console.log('üîç V√©rification de la configuration d\'authentification...');
  
  const config = {
    apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,
    authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,
    projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,
  };
  
  console.log('Configuration Firebase:', {
    apiKey: config.apiKey ? '‚úÖ Pr√©sent' : '‚ùå Manquant',
    authDomain: config.authDomain ? '‚úÖ Pr√©sent' : '‚ùå Manquant',
    projectId: config.projectId ? '‚úÖ Pr√©sent' : '‚ùå Manquant',
  });
  
  return config;
}

// Fonction pour tester la cr√©ation de compte
export async function testCreateAccount(email: string, password: string, displayName?: string) {
  console.log('üß™ Test de cr√©ation de compte...');
  
  try {
    const { createUserWithEmailAndPassword, updateProfile } = await import('firebase/auth');
    
    console.log('1Ô∏è‚É£ Cr√©ation du compte...');
    const result = await createUserWithEmailAndPassword(auth, email, password);
    console.log('‚úÖ Compte cr√©√© avec succ√®s:', result.user.email);
    
    if (displayName) {
      console.log('2Ô∏è‚É£ Mise √† jour du profil...');
      await updateProfile(result.user, { displayName });
      console.log('‚úÖ Profil mis √† jour avec succ√®s');
    }
    
    console.log('3Ô∏è‚É£ D√©connexion...');
    await auth.signOut();
    console.log('‚úÖ D√©connexion r√©ussie');
    
    return { success: true, user: result.user };
    
  } catch (error: any) {
    console.error('‚ùå Erreur de cr√©ation de compte:', error);
    console.error('Code d\'erreur:', error.code);
    console.error('Message:', error.message);
    return { success: false, error: error.message };
  }
} 